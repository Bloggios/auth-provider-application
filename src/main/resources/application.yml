server:
  port: 7001
spring:
  application:
    name: auth-provider-application
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.bloggios.auth.provider
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT:5432}/${POSTGRES_DATABASE}?currentSchema=auth-provider
    hikari:
      username: ${POSTGRES_USERNAME}
      password: ${POSTGRES_PASSWORD}
      maximum-pool-size: ${POSTGRES_POOL_SIZE:100}
      minimum-idle: ${POSTGRES_IDLE:7}
      leak-detection-threshold: 120000
      max-lifetime: 1800000
      idle-timeout: 600000
      connection-timeout: 600000
  jpa:
    hibernate:
      ddl-auto: update

application:
  version: @version@
  profile: ${ACTIVE_PROFILE}

elasticsearch:
  server: ${ES_SERVER:localhost}
  username: ${ES_USERNAME:root}
  password: ${ES_PASSWORD:root}
  indices:
    user-auth: ${ACTIVE_PROFILE:local}.auth.provider.user_auth
    registration-otp: ${ACTIVE_PROFILE:local}.auth.provider.registration_otp
    forget-password: ${ACTIVE_PROFILE:local}.auth.provider.forget_password

auth-server:
  allowed-roles:
    cookie-name: bloggios-auth
    roles-to-allow:
      devsandbox:
        origin-name: https://dev.bloggios.in
        must-roles:
          - ROLE_DEVSANDBOX
      production:
        origin-name: https://www.bloggios.com
        must-roles:
          - ROLE_USER
      production-protocol:
        origin-name: https://bloggios.com
        must-roles:
          - ROLE_USER
      api-testing:
        origin-name: http://localhost:2000
        must-roles:
          - ROLE_DEVELOPER
  OAuth2:
    OAuth-data:
      google:
        clientId: ${GOOGLE_CLIENT_ID}
        api-secret: ${GOOGLE_API_SECRET}

refresh-mgmt:
  cookie-name: ${ACTIVE_PROFILE:local}.bg-refresh-mgmt

eureka:
  instance:
    hostname: localhost
  client:
    service-url:
      defaultZone: ${EUREKA_URL}
    enabled: false
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: prometheus

auth-provider:
  kafka:
    producer:
      topics:
        registration-otp: ${ACTIVE_PROFILE:local}.auth-provider.registration-otp
        password-changed: ${ACTIVE_PROFILE:local}.auth-provider.password-changed
        forget-password: ${ACTIVE_PROFILE:local}.auth-provider.forget-password
        user: ${ACTIVE_PROFILE:local}.auth-provider.user
    consumer:
      group-id: ${ACTIVE_PROFILE:local}.auth-provider.application
      topics:
        profile-added: ${ACTIVE_PROFILE:local}.user-provider.profile-added
        profile-badge: ${ACTIVE_PROFILE:local}.user-provider.profile-badge

authentication:
  key-provider:
    private-key: ${PRIVATE_KEY:classpath:security/privkey.pem}
    public-key: ${PUBLIC_KEY:classpath:security/pubkey.pem}
  path-exclude:
    paths:
      - /auth-provider/auth/**
      - /auth-provider/oauth/**
      - /actuator/**
      - /oauth2/**
      - /api/v1/auth/**"
      - /v2/api-docs
      - /swagger-resources
      - /swagger-resources/**
      - /configuration/ui
      - /configuration/security
      - /swagger-ui/**
      - /webjars/**
      - /swagger-ui.html
      - /v3/api-docs
      - /v3/api-docs/**

swagger-properties:
  group-name:
    definition: ${spring.application.name}
    scan-packages: com.bloggios.auth.provider
  info:
    title: Bloggios - Auth Provider Application
    version: @version@
    description: API Documentation for auth-provider-application
    summary: The Auth Provider Application microservice, developed with Java 17 and Spring Boot, is designed to offer robust authentication and authorization services for Bloggios. This microservice ensures secure access and user management, enhancing the overall security framework of the platform.
    contact:
      name: Bloggios
      email: support@bloggios.com
      url: https://www.bloggios.com
    license:
      name: Apache 2 License
      url: https://github.com/Bloggios/auth-provider-application/blob/main/LICENSE
  servers:
    local:
      name: Local Port
      url: http://localhost:${server.port}
    production:
      name: Hosted Port
      url: https://api.bloggios.com